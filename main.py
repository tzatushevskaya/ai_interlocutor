import argparse

import speech_recognition as sr
from gtts import gTTS
import pygame
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from pathlib import Path
import wave
from pydub import AudioSegment
from logger import setup_logger

# Setup logger
logger = setup_logger("log.json")


def convert_speech_to_text(audio_file):
    """
    Convert speech from an audio file to text using Google's Speech Recognition.

    Parameters:
    - audio_file (str): Path to the input audio file.

    Returns:
    - str: The recognized text.
    """
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file) as source:
        audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data)
        return text


def process_text_through_gpt(text):
    """
    Process the given text through a preconfigured GPT model.

    Parameters:
    - text (str): The input text to process.

    Returns:
    - str: The processed text generated by the GPT model.
    """
    tokenizer = GPT2Tokenizer.from_pretrained("gpt2-medium")
    model = GPT2LMHeadModel.from_pretrained("gpt2-medium")
    input_ids = tokenizer.encode(text, return_tensors="pt")
    output = model.generate(input_ids, max_length=100, num_return_sequences=1)
    generated_text = tokenizer.decode(output[0], skip_special_tokens=True)
    return generated_text


def convert_text_to_speech(text):
    """
    Convert the given text to speech using Google Text-to-Speech (gTTS) library.

    Parameters:
    - text (str): The input text to convert.

    Returns:
    - gTTS: The gTTS object containing the audio data.
    """
    tts = gTTS(text=text, lang='en')
    return tts


def play_audio(audio_file):
    """
    Play the audio file.

    Parameters:
    - audio_file (str): Path to the audio file to play.
    """
    pygame.mixer.init()
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)


def process_audio(audio_file):
    """
    Process the audio file.

    Parameters:
    - audio_file (str): Path to the input audio file.

    Returns:
    - str: Path to the processed audio file.
    """
    # Convert speech to text
    text = convert_speech_to_text(audio_file)

    # Process text through GPT model
    gpt_response = process_text_through_gpt(text)

    # Convert text response to speech
    tts = convert_text_to_speech(gpt_response)

    # Save text-to-speech output to a temporary file
    output_audio_file = "samples/output_audio.mp3"
    tts.save(output_audio_file)

    return output_audio_file


def is_valid_audio_format(audio_file):
    """
    Check if the given audio file is in a valid format (WAV or MP3).

    Parameters:
    - audio_file (str): Path to the input audio file.

    Returns:
    - bool: True if the audio file is in a valid format, False otherwise.
    """
    if str(audio_file).endswith('.wav'):
        try:
            with wave.open(str(audio_file), 'rb') as f:
                return True
        except wave.Error:
            return False
    elif str(audio_file).endswith('.mp3'):
        try:
            AudioSegment.from_mp3(str(audio_file))
            return True
        except Exception:
            return False
    else:
        return False


def process_audio(input_audio_file):
    """
    Main function to process the input audio file.

    Parameters:
    - input_audio_file (str): Path to the input audio file.

    """
    # Validate audio file format
    if not is_valid_audio_format(input_audio_file):
        error_message = "Error: Unsupported audio file format. Please provide a WAV or MP3 audio file."
        print(error_message)
        logger.error(error_message)
        return

    # Process audio
    output_audio_file = process_audio(input_audio_file)

    # Play the resulting audio
    logger.info("Playing the resulting audio...")
    play_audio(output_audio_file)

    # Clean up temporary files
    Path(output_audio_file).unlink()
def run():
    """Runs stages of audio processing in the conceived order,
    possibly with parameters."""
    parser = argparse.ArgumentParser(description="AI Interlocutor")

    parser.add_argument(
        "--file",
        "-f",
        type=str,
        default=Path("./samples/output_audio.mp3"),
        help="\tPath to audio file to process."
        "The default value is test sample audio file.",
    )
    parser.add_argument(
        "--interactive",
        "-i",
        action="store_true",
        help="Run the program in the interactive mode.",
    )

    args = parser.parse_args()
    is_interactive = True if args.interactive else False
    input_file = Path(args.file)
    process_audio(input_file)
run()